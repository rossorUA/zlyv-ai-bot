from keep_alive import keep_alive
keep_alive()
import os
import time
import random
import json
import requests
from datetime import datetime, timedelta
import openai
from telebot import TeleBot

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 21
MIN_POST_LEN = 200
MAX_POST_LEN = 250

HISTORY_FILE = "post_history.json"
EMOJIS = ['üî•', 'ü§ñ', 'ü¶æ', 'üöÄ', 'üß†', '‚ú®', 'üí°', 'üòé', 'üéâ', 'üåü', 'üì±', 'üõ†', 'üëæ']
SIGNATURE = "\n@zlyv_ai"

STATIC_THEMES = [
    "AI-–Ω–æ–≤–∏–Ω–∫–∏", "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏", "—ñ–Ω—Å–∞–π–¥–∏", "–Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", "Google", "GitHub", "–ª–∞–π—Ñ—Ö–∞–∫–∏", 
    "open-source", "ProductHunt", "Bun", "Deno", "Next.js", "Qwik", "Astro", "VS Code", 
    "Copilot", "–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", "—Ç—Ä–µ–Ω–¥–∏"
]

openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_BOT_TOKEN)


def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    # –ú–æ–∂–µ—à –∑–∞–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Å–≤—ñ–π, –∑–∞—Ä–∞–∑ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É ‚Äî Habr (API –Ω–µ–º–∞, –±–µ—Ä–µ–º–æ random –∑ open-source).
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ç–≤—ñ–π –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–∏–Ω ‚Äî –ù–ï –ó–ê–õ–ò–®–ê–ô –ø—Ä–æ—Å—Ç–æ —è–∫ —î, –±–æ –±—É–¥–µ –¥—É–±–ª—é–≤–∞—Ç–∏ —Å—Ç–∞—Ä–µ!
    news = []
    resp = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=30")
    for hit in resp.json().get("hits", []):
        news.append({"title": hit["title"], "url": hit["url"]})
    random.shuffle(news)
    return news

def paraphrase_text(text):
    # –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ OpenAI (gpt-3.5-turbo)
    messages = [
        {"role": "system", "content": "–ü–µ—Ä–µ–ø–∏—à–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ, —Ü—ñ–∫–∞–≤–æ —Ç–∞ –ª—é–¥—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É, –±–µ–∑ –∑–∞–π–≤–æ—ó –æ—Ñ—ñ—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–æ–¥–∏."},
        {"role": "user", "content": text}
    ]
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=120,
        temperature=1.1
    )
    return response["choices"][0]["message"]["content"]

def generate_caption(news, emojis):
    theme = random.choice(STATIC_THEMES)
    emoji = random.choice(emojis)
    intro = f"{emoji} {theme.upper()}"
    text = paraphrase_text(news["title"])

    # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    if len(text) < MIN_POST_LEN:
        text = paraphrase_text(news["title"]) + " –©–æ —Å–∫–∞–∂–µ—à? ü§î"

    return intro + "\n\n" + text


