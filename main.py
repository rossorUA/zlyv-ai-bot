from keep_alive import keep_alive
keep_alive()
import os
import time
import random
import json
import requests
import re
from datetime import datetime
import openai
from telebot import TeleBot

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 24  # –¥–æ 00:00

MIN_POST_LEN = 250
MAX_POST_LEN = 350

HISTORY_FILE = "post_history.json"
EMOJIS = [
    'üî•', 'ü§ñ', 'ü¶æ', 'üöÄ', 'üß†', '‚ú®', 'üí°', 'üòé', 'üéâ', 'üåü', 'üì±', 'üõ†', 'üëæ',
    'üìä', 'üíª', 'üì¢', '‚ö°Ô∏è', 'üë®‚Äçüíª', 'üòè', 'ü•∏', 'üîÆ', 'üïπÔ∏è', 'ü¶â', 'üé≤', 'üß©', 'üßë‚Äçüíª'
]
SIGNATURE = "\n@zlyv_ai"

STYLE_PROMPTS = [
    "pixel art, vibrant, detailed",
    "vector illustration, flat, modern, bright",
    "photo-realistic, realistic lighting, tech workspace",
    "3d render, colorful, modern, shiny",
    "minimalist, clean, sharp, IT design",
    "retro computer art, 90s style",
    "mem-style, fun, ironic"
]

MEME_LINES = [
    "–ü–∏—à–∏, —è–∫—â–æ –≤–∂–µ —é–∑–∞—î—à —Ü–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω üòÖ",
    "–ó —Ç–∞–∫–æ—é –Ω–æ–≤–∏–Ω–æ—é –Ω–∞–≤—ñ—Ç—å –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–µ —Å—Ç—Ä–∞—à–Ω–∏–π üí™",
    "–ó–∞–ª–∏–ø–∞–π –∑–∞ –∫–æ–º–ø–æ–º ‚Äì —ñ –Ω–µ –∑–∞–±—É–¥—å –∑—Ä–æ–±–∏—Ç–∏ –∫–∞–≤—É ‚òïÔ∏è",
    "–í—ñ–¥–∫–ª–∞–¥–∏ –º–∏—à–∫—É, —á–∞—Å –∞–ø–≥—Ä–µ–π–¥–Ω—É—Ç–∏ –º–æ–∑–æ–∫ üß†",
    "–í –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–≤—ñ–∂–µ, –±–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –≤–æ–¥–∏ ü•§",
    "–Ø–∫—â–æ –¥–æ—á–∏—Ç–∞–≤ ‚Äì —Ç–∏ —Ä–µ–∞–ª—å–Ω–æ —à–∞—Ä–∏—à üòâ",
    "–ó —Ç–∞–∫–∏–º –∞–ø–¥–µ–π—Ç–æ–º –Ω–∞–≤—ñ—Ç—å –∫–æ–¥ —Ä–µ–≤‚Äô—é –∑–¥–∞—î—Ç—å—Å—è –ª–µ–≥–∫–∏–º üëÄ",
    "–§—É—Ö, –Ω—É —Ü–µ –≤–∂–µ next level! üöÄ",
    "–ù–µ –∑–∞–±—É–≤–∞–π: –∫–æ–¥ —Ñ—ñ–∫—Å–∏—Ç—å –±–∞–≥–∏, –∞ –Ω–æ–≤–∏–Ω–∏ ‚Äî –Ω–∞—Å—Ç—Ä—ñ–π! üòè",
    "–ß–∏—Ç–∞—î—à —Ç–∞–∫–µ ‚Äì —ñ —Å–∞–º —Å–æ–±—ñ DevOps ü¶â",
    "–•—Ç–æ –Ω–µ —Å–ª—ñ–¥–∫—É—î –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ ‚Äî —Ç–æ–π –¥–µ–±–∞–∂–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω üòÇ"
]

EXTRA_IDEAS = [
    "–õ–∞–π—Ñ—Ö–∞–∫: –Ω–µ —á–µ–∫–∞–π –∞–ø–¥–µ–π—Ç—É ‚Äî —Ç–µ—Å—Ç—É–π –æ–¥—Ä–∞–∑—É! ü¶æ",
    "–ö–æ—Ä–æ—Ç–∫–æ: —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –≤–∂–µ —Ü–µ —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É—é—Ç—å —É –ø—Ä–æ–¥–∞–∫—à–Ω.",
    "–ë–æ–Ω—É—Å: —à–≤–∏–¥–∫–∏–π —Ç—É–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó ‚Äì –∑–µ–∫–æ–Ω–æ–º–∏—Ç—å —á–∞—Å –∫–æ–∂–Ω–æ–º—É –¥–µ–≤—É.",
    "–†–µ–∞–ª—å–Ω—ñ –∫–µ–π—Å–∏ –≤–∂–µ –Ω–∞ GitHub. üî•"
]

client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = TeleBot(TELEGRAM_BOT_TOKEN)

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    news = []
    try:
        resp = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=50", timeout=10)
        data = resp.json()
        for hit in data.get("hits", []):
            # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–∑–∞–∑–≤–∏—á–∞–π —î –≤ title)
            if hit.get("title") and hit.get("url"):
                title = hit["title"].lower()
                # –§—ñ–ª—å—Ç—Ä ‚Äì –∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ü–¢/AI/Software/–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è/—Å—Ç–∞—Ä—Ç–∞–ø–∏
                if any(
                    kw in title for kw in [
                        "ai", "ml", "github", "python", "node", "javascript", "js", "typescript",
                        "dev", "open source", "framework", "cloud", "linux", "tool", "api", "software",
                        "release", "launch", "update", "feature", "docker", "kubernetes", "app", "react",
                        "go", "java", "c++", "cpp", "data", "postgres", "sql", "api", "macos", "windows"
                    ]
                ):
                    news.append({"title": hit["title"], "url": hit["url"]})
        random.shuffle(news)
    except Exception as e:
        print(f"[ERROR] fetch_fresh_news: {e}")
    return news

def paraphrase_text(title, url):
    # –°—É–ø–µ—Ä–ø—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è GPT: –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏, –Ω—É–ª—å –≤–æ–¥–∏, —Ç—ñ–ª—å–∫–∏ –ø–æ —Ç–µ–º—ñ –Ü–¢, AI, —Ä–æ–∑—Ä–æ–±–∫–∞
    extra = ""
    if random.random() < 0.3:
        extra = "\n" + random.choice(EXTRA_IDEAS)
    prompt = (
        "–¢–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª—É –¥–ª—è –∞–π—Ç—ñ—à–Ω–∏–∫—ñ–≤. –ü–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. "
        "–í—ñ–∑—å–º–∏ —Ü—é –Ω–æ–≤–∏–Ω—É —ñ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ —Å—É—Ç—ñ, —â–æ —Å—Ç–∞–ª–æ—Å—è, —è–∫—É –ø—Ä–æ–±–ª–µ–º—É –≤–∏—Ä—ñ—à—É—î, —â–æ —Ü–µ –¥–∞—î –¥–µ–≤–∞–º, "
        "—è–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—ñ—á–∞/–∫–æ—Ä–∏—Å—Ç—å/—Ñ—ñ—à–∫–∞, –±–µ–∑ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó, –±–µ–∑ –ø–∏—Ç–∞–Ω—å —ñ –ª—ñ—Ä–∏—á–Ω–∏—Ö –≤—ñ–¥—Å—Ç—É–ø—ñ–≤. "
        "–ü–∏—à–∏ —É 2‚Äì3 –∞–±–∑–∞—Ü–∞—Ö, —Ä–æ–±–∏ –∞–±–∑–∞—Ü–∏! –ù–µ –∑–≥–∞–¥—É–π —Å–∞–π—Ç —á–∏ –±—Ä–µ–Ω–¥, –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Ö–µ—à—Ç–µ–≥–∏ —á–∏ –ø—ñ–¥–ø–∏—Å–∫–∏. "
        "–ù–µ –ø–∏—à–∏ '–º–æ–∂–ª–∏–≤–æ —Ü–µ —Å—Ç–∞–Ω–µ —Ç—Ä–µ–Ω–¥–æ–º', –Ω–µ –º—ñ—Ä–∫—É–π ‚Äì —Ç—ñ–ª—å–∫–∏ —Ñ–∞–∫—Ç–∏ –∞–±–æ —Ä–µ–∞–ª—å–Ω—ñ –≤—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤."
        f"\n–û—Å—å –Ω–æ–≤–∏–Ω–∞:\n{title}{extra}"
    )
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=280,
            temperature=1.2
        )
        text = response.choices[0].message.content.strip()
        # –ß–∏—Å—Ç–∫–∞ –≤—ñ–¥ –∑–∞–π–≤–æ–≥–æ (–±—Ä–µ–Ω–¥–∏, –ª—ñ–Ω–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏)
        text = re.sub(r'http\S+', '', text)
        text = re.sub(r'#\w+', '', text)
        text = re.sub(r'(–∫–∞–Ω–∞–ª|—Å–∞–π—Ç|—Ä–µ—î—Å—Ç—Ä–∞—Ü|–ø—ñ–¥–ø–∏—Å|telegram|tg|—á–∏—Ç–∞–π—Ç–µ|–¥–µ—Ç–∞–ª—ñ|–¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ|—á–∏—Ç–∞–π|–¥–∏–≤–∏—Å—è|–¥–∏–≤–∏—Å—å|–∫–ª—ñ–∫|–ø—Ä–∏—î–¥–Ω—É–π|—Å–ª—ñ–¥–∫—É–π)', '', text, flags=re.I)
        text = re.sub(r'\n+', '\n', text)
        text = text.replace('  ', ' ')
        if len(text) > MAX_POST_LEN:
            text = text[:MAX_POST_LEN-1] + "‚Ä¶"
        if len(text) < MIN_POST_LEN:
            text += " " + random.choice(MEME_LINES)
        # –ì–ê–†–ê–ù–¢–£–Ñ–ú–û –∞–±–∑–∞—Ü–∏
        if '\n' not in text:
            # –®—Ç—É—á–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ 2 –∞–±–∑–∞—Ü–∏ (–ø–æ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—Ä–∞–∑–∏)
            words = text.split()
            if len(words) > 32:
                text = ' '.join(words[:len(words)//2]) + '\n\n' + ' '.join(words[len(words)//2:])
        return text.strip()
    except Exception as e:
        print(f"[ERROR] paraphrase_text: {e}")
        return title  # fallback

def random_style_prompt(theme):
    base = random.choice(STYLE_PROMPTS)
    topic = theme.lower()
    full = f"{base}, theme: {topic}, trending, digital art, no text, high detail, modern"
    return full

def should_send_image():
    return random.randint(1, 5) == 3

def generate_caption(news, emojis):
    text = paraphrase_text(news["title"], news["url"])
    # –ú—ñ–Ω—ñ–º—É–º –æ–¥–∏–Ω –∞–±–∑–∞—Ü, –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏
    return f"{text}\n{SIGNATURE}", random.choice(STYLE_PROMPTS)

def generate_ai_image(news, theme):
    try:
        style_prompt = theme
        prompt = f"{news['title']}, {style_prompt}"
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response.data[0].url
        return image_url
    except Exception as e:
        print(f"[ERROR] generate_ai_image: {e}")
        return None

def post_news():
    history = load_history()
    news_list = fetch_fresh_news()
    print(f"[DEBUG] –Ñ {len(news_list)} –Ω–æ–≤–∏–Ω")
    for news in news_list:
        print(f"[DEBUG] –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {news['title']}")
        if news["title"] not in history and news["title"]:
            caption, style_prompt = generate_caption(news, EMOJIS)
            try:
                if should_send_image():
                    img_url = generate_ai_image(news, style_prompt)
                    if img_url:
                        bot.send_photo(TELEGRAM_CHANNEL_ID, img_url, caption=caption)
                        print(f"[SUCCESS] –ü–æ—Å—Ç —ñ–∑ –º–∞–ª—é–Ω–∫–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                    else:
                        bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                        print(f"[SUCCESS] –ü–æ—Å—Ç –±–µ–∑ –º–∞–ª—é–Ω–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                else:
                    bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                    print(f"[SUCCESS] –ü–æ—Å—Ç –±–µ–∑ –º–∞–ª—é–Ω–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                history.add(news["title"])
                save_history(history)
            except Exception as e:
                print(f"[ERROR] post_news: {e}")
            break
    else:
        print("[DEBUG] –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ–º–∞—î.")

if __name__ == "__main__":
    while True:
        now = datetime.now()
        if POSTING_HOURS_START <= now.hour < POSTING_HOURS_END:
            try:
                post_news()
            except Exception as e:
                print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            print("–ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –ø–æ—Å—Ç—ñ–≤!")
        time.sleep(600)
