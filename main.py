import os
import time
import random
import json
import requests
import datetime
import openai
from telebot import TeleBot

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
HISTORY_FILE = "post_history.json"
MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9    # –ó 9:00
POSTING_HOURS_END = 21     # –î–æ 21:00

openai.api_key = OPENAI_API_KEY
bot = TeleBot(TELEGRAM_BOT_TOKEN)

EMOJIS = ["üî•", "ü§ñ", "üí°", "‚ú®", "üöÄ", "üß†", "‚ö°", "üì¢", "üåü", "ü¶æ", "üíª", "üòé", "üòè", "üòÅ", "üéâ", "üòÆ"]
# –¢–µ–º–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—ó
STATIC_THEMES = [
    "AI-–Ω–æ–≤–∏–Ω–∫–∏", "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏", "—ñ–Ω—Å–∞–π–¥–∏", "–Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", "Google", "GitHub", "–º–µ–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤",
    "—Å–≤—ñ–∂—ñ —Ä–µ–ª—ñ–∑–∏", "–ª–∞–π—Ñ—Ö–∞–∫–∏", "open-source", "ProductHunt", "Bun, Deno, Next.js", "Qwik, Astro", "VS Code",
    "Copilot", "–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ", "–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", "—Ç—Ä–µ–Ω–¥–∏, —è–∫—ñ —â–µ –Ω–µ –≤ –º–µ–π–Ω—Å—Ç—Ä–∏–º—ñ"
]

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    # –ë–µ—Ä–µ–º–æ —Å–≤—ñ–∂—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –∫—ñ–ª—å–∫–æ—Ö –¥–∂–µ—Ä–µ–ª. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ.
    try:
        news = []
        # Hacker News (—Ç–æ–ø –∑–∞ –¥–µ–Ω—å)
        hn = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=20").json()
        for hit in hn['hits']:
            title = hit['title']
            url = hit['url'] or hit.get('story_url', '')
            if title and url:
                news.append(f"{title} ({url})")
        # Product Hunt (API —î, —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ —Ñ–µ–π–∫–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
        # news.append("–ù–æ–≤–∏–π —Å—Ç–∞—Ä—Ç–∞–ø –Ω–∞ ProductHunt - OpenAI Tetris (https://www.producthunt.com/)")
        # GitHub Trending (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ BeautifulSoup)
        return random.sample(news, min(5, len(news)))  # –ë–µ—Ä–µ–º–æ 5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏:", e)
        return []

def random_emoji():
    return random.choice(EMOJIS)

def generate_post(history):
    themes = STATIC_THEMES + fetch_fresh_news()
    theme = random.choice(themes)
    extra_humor = random.choice([
        "",
        "–î–æ—Ä–µ—á—ñ, –∞–π—Ç—ñ—à–Ω–∏–∫–∏ ‚Äî —Ü–µ –º–∞–≥–∏ XXI —Å—Ç–æ–ª—ñ—Ç—Ç—è! " + random_emoji(),
        "–ú–∞—é –¥—É–º–∫—É: –±–µ–∑ —Å–º—ñ—Ö—É —Ç—É—Ç –Ω–µ –≤–∏–∂–∏—Ç–∏ " + random_emoji(),
        "–©–µ –± –∫–∞–≤–∏... " + random_emoji(),
        "–í—Å—ñ –±–∞–≥–∏ ‚Äî —Ü–µ —Ñ—ñ—á—ñ, –ø—Ä–æ—Å—Ç–æ –≤–∏ —â–µ –Ω–µ —Ä–æ–∑—ñ–±—Ä–∞–ª–∏—Å—è üòè"
    ])
    prompt = (
        f"–£—è–≤–∏, —â–æ —Ç–∏ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–π—Ç—ñ—à–Ω–∏–∫-—ñ–Ω—Å–∞–π–¥–µ—Ä, —è–∫–∏–π –ø–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ –ø–æ—Å—Ç–∏ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É –ø—Ä–æ IT, AI, –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –Ω–æ–≤—ñ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. "
        f"–ó–≥–µ–Ω–µ—Ä—É–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π, –ª—é–¥—è–Ω–∏–π, –ª–µ–≥–∫–∏–π, –≤–µ—Å–µ–ª–∏–π, —ñ–Ω–æ–¥—ñ –∑ —ñ—Ä–æ–Ω—ñ—î—é —Ç–∞ –º–µ–º–∞–º–∏ –ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é (–º—ñ–Ω—ñ–º—É–º 350 —Å–∏–º–≤–æ–ª—ñ–≤), –ø—Ä–æ —Ç–µ–º—É: {theme}. "
        f"–°—Ç—Ä—É–∫—Ç—É—Ä—É–π —É 2-4 —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∞–±–∑–∞—Ü–∏, –±–µ–∑ –∑–∞–π–≤–∏—Ö –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤. –í—Å—Ç–∞–≤–ª—è–π —Ä—ñ–∑–Ω—ñ emoji, –æ—Å–æ–±–ª–∏–≤–æ –≤–æ–≥–Ω–∏–∫–∏, —Å–º–∞–π–ª–∏, —Å—É—á–∞—Å–Ω—ñ —ñ–∫–æ–Ω–∫–∏. "
        f"–ó–∞–≤–∂–¥–∏ –ø–∏—à–∏ –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏, –∂–∞—Ä—Ç—É–π, –¥–æ–¥–∞–≤–∞–π –≤–ª–∞—Å–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, —â–æ–± –±—É–ª–æ –≤—ñ–¥—á—É—Ç—Ç—è, —â–æ –ø–∏—à–µ —Ä–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞. "
        f"–ü—ñ–¥–ø–∏—Å @zlyv_ai –æ–¥—Ä–∞–∑—É –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—É. –ù–µ –ø–æ–≤—Ç–æ—Ä—é–π –º–∏–Ω—É–ª—ñ –ø–æ—Å—Ç–∏, –ø—Ä–∏–¥—É–º–∞–π —â–æ—Å—å –Ω–æ–≤–µ. "
        f"{extra_humor}"
    )
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å—Ç—É —á–µ—Ä–µ–∑ GPT
    for _ in range(6):
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=900,
            temperature=1.1
        )
        post = resp.choices[0].message["content"].strip()
        post = post.replace("\n\n\n", "\n\n").replace(" @zlyv_ai", "\n@zlyv_ai").replace("\n @zlyv_ai", "\n@zlyv_ai")
        if post not in history and len(post) >= 340 and post.endswith("@zlyv_ai"):
            return post
    return None

def generate_image(post_text):
    try:
        img_prompt = (
            f"–ó–≥–µ–Ω–µ—Ä—É–π —Å—É—á–∞—Å–Ω—É —É–Ω—ñ–∫–∞–ª—å–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É —É —Ä—ñ–∑–Ω–æ–º—É —Å—Ç–∏–ª—ñ (–∞—Ä—Ç, –≤–µ–∫—Ç–æ—Ä, digital, —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—è) –¥–æ —Ü—å–æ–≥–æ –∞–≤—Ç–æ—Ä—Å—å–∫–æ–≥–æ –∞–π—Ç—ñ—à–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: \"{post_text[:100]}...\". "
            f"–ë–µ–∑ –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. –°—é–∂–µ—Ç –º–∞—î –ø—ñ–¥—Ö–æ–¥–∏—Ç–∏ –ø—ñ–¥ –∑–º—ñ—Å—Ç —Ç–µ–∫—Å—Ç—É."
        )
        dalle = openai.Image.create(
            prompt=img_prompt,
            n=1,
            size="1024x1024"
        )
        return dalle['data'][0]['url']
    except Exception as e:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞–ª—é–Ω–æ–∫:", e)
        return None

def post_to_telegram(post_text, image_url=None):
    if image_url:
        img = requests.get(image_url).content
        with open("temp_image.png", "wb") as f:
            f.write(img)
        with open("temp_image.png", "rb") as photo:
            bot.send_photo(TELEGRAM_CHANNEL_ID, photo, caption=post_text)
        os.remove("temp_image.png")
    else:
        bot.send_message(TELEGRAM_CHANNEL_ID, post_text)

def make_posting_times():
    # –ì–µ–Ω–µ—Ä—É—î–º–æ 30 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø—Ä–æ–º—ñ–∂–∫—ñ–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å
    minutes = (POSTING_HOURS_END - POSTING_HOURS_START) * 60
    points = sorted(random.sample(range(1, minutes-1), MAX_POSTS_PER_DAY - 1))
    times = [points[0]] + [points[i] - points[i-1] for i in range(1, len(points))] + [minutes - points[-1]]
    return times

def wait_until(start_hour):
    now = datetime.datetime.now()
    if now.hour < start_hour:
        wake = now.replace(hour=start_hour, minute=0, second=0, microsecond=0)
        delay = (wake - now).total_seconds()
        print(f"–ó–∞—Ä–∞–∑ –Ω—ñ—á ‚Äî —á–µ–∫–∞—î–º–æ –¥–æ {start_hour}:00 ({int(delay//60)} —Ö–≤)")
        time.sleep(delay)

def main():
    while True:
        now = datetime.datetime.now()
        if now.hour < POSTING_HOURS_START or now.hour >= POSTING_HOURS_END:
            wait_until(POSTING_HOURS_START)
        posting_times = make_posting_times()
        print(f"–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {posting_times}")
        history = load_history()
        for idx, delay in enumerate(posting_times):
            post = None
            while not post:
                post = generate_post(history)
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —à–∞–Ω—Å –¥–æ–¥–∞—Ç–∏ –º–∞–ª—é–Ω–æ–∫ (25-35%)
            image_url = generate_image(post) if random.random() < random.uniform(0.25, 0.35) else None
            post_to_telegram(post, image_url)
            print(f"‚úÖ [{datetime.datetime.now().strftime('%H:%M:%S')}] –ü–æ—Å—Ç {idx+1}/30 –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            history.add(post)
            save_history(history)
            if idx < len(posting_times)-1:
                print(f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay} —Ö–≤–∏–ª–∏–Ω.")
                time.sleep(delay * 60)
        print("–í—Å—ñ –ø–æ—Å—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ. –ß–µ–∫–∞—î–º–æ –¥–æ –∑–∞–≤—Ç—Ä–∞!")
        wait_until(POSTING_HOURS_START)

if __name__ == "__main__":
    main()
