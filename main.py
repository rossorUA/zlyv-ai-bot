from keep_alive import keep_alive
keep_alive()

import os
import time
import random
import json
import requests
import re
from datetime import datetime
import openai
from telebot import TeleBot

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 24  # –¥–æ 00:00

MIN_POST_LEN = 100   # –ú–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ 250 —è–∫—â–æ —Ç—Ä–µ–±–∞ —Å—É–≤–æ—Ä–æ
MAX_POST_LEN = 350

HISTORY_FILE = "post_history.json"
EMOJIS = [
    'üî•', 'ü§ñ', 'ü¶æ', 'üöÄ', 'üß†', '‚ú®', 'üí°', 'üòé', 'üéâ', 'üåü', 'üì±', 'üõ†', 'üëæ',
    'üìä', 'üíª', 'üì¢', '‚ö°Ô∏è', 'üë®‚Äçüíª', 'üòè', 'ü•∏', 'üîÆ', 'üïπÔ∏è', 'ü¶â', 'üé≤', 'üß©', 'üßë‚Äçüíª'
]

MEME_LINES = [
    "–ü–∏—à–∏, —è–∫—â–æ –≤–∂–µ —é–∑–∞—î—à —Ü–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω üòÖ",
    "–ó —Ç–∞–∫–æ—é –Ω–æ–≤–∏–Ω–æ—é –Ω–∞–≤—ñ—Ç—å –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–µ —Å—Ç—Ä–∞—à–Ω–∏–π üí™",
    "–ó–∞–ª–∏–ø–∞–π –∑–∞ –∫–æ–º–ø–æ–º ‚Äì —ñ –Ω–µ –∑–∞–±—É–¥—å –∑—Ä–æ–±–∏—Ç–∏ –∫–∞–≤—É ‚òïÔ∏è",
    "–í—ñ–¥–∫–ª–∞–¥–∏ –º–∏—à–∫—É, —á–∞—Å –∞–ø–≥—Ä–µ–π–¥–Ω—É—Ç–∏ –º–æ–∑–æ–∫ üß†",
    "–í –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–≤—ñ–∂–µ, –±–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –≤–æ–¥–∏ ü•§",
    "–Ø–∫—â–æ –¥–æ—á–∏—Ç–∞–≤ ‚Äì —Ç–∏ —Ä–µ–∞–ª—å–Ω–æ —à–∞—Ä–∏—à üòâ",
    "–ó —Ç–∞–∫–∏–º –∞–ø–¥–µ–π—Ç–æ–º –Ω–∞–≤—ñ—Ç—å –∫–æ–¥ —Ä–µ–≤‚Äô—é –∑–¥–∞—î—Ç—å—Å—è –ª–µ–≥–∫–∏–º üëÄ",
    "–§—É—Ö, –Ω—É —Ü–µ –≤–∂–µ next level! üöÄ",
    "–ù–µ –∑–∞–±—É–≤–∞–π: –∫–æ–¥ —Ñ—ñ–∫—Å–∏—Ç—å –±–∞–≥–∏, –∞ –Ω–æ–≤–∏–Ω–∏ ‚Äî –Ω–∞—Å—Ç—Ä—ñ–π! üòè",
    "–ß–∏—Ç–∞—î—à —Ç–∞–∫–µ ‚Äì —ñ —Å–∞–º —Å–æ–±—ñ DevOps ü¶â",
    "–•—Ç–æ –Ω–µ —Å–ª—ñ–¥–∫—É—î –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ ‚Äî —Ç–æ–π –¥–µ–±–∞–∂–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω üòÇ"
]

EXTRA_IDEAS = [
    "–õ–∞–π—Ñ—Ö–∞–∫: –Ω–µ —á–µ–∫–∞–π –∞–ø–¥–µ–π—Ç—É ‚Äî —Ç–µ—Å—Ç—É–π –æ–¥—Ä–∞–∑—É! ü¶æ",
    "–ö–æ—Ä–æ—Ç–∫–æ: —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –≤–∂–µ —Ü–µ —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É—é—Ç—å —É –ø—Ä–æ–¥–∞–∫—à–Ω.",
    "–ë–æ–Ω—É—Å: —à–≤–∏–¥–∫–∏–π —Ç—É–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó ‚Äì –∑–µ–∫–æ–Ω–æ–º–∏—Ç—å —á–∞—Å –∫–æ–∂–Ω–æ–º—É –¥–µ–≤—É.",
    "–†–µ–∞–ª—å–Ω—ñ –∫–µ–π—Å–∏ –≤–∂–µ –Ω–∞ GitHub. üî•"
]

SIGNATURE = "\n@zlyv_ai"

IT_KEYWORDS = [
    "ai", "ml", "github", "python", "node", "javascript", "js", "typescript",
    "dev", "open source", "framework", "cloud", "linux", "tool", "api", "software",
    "release", "launch", "update", "feature", "docker", "kubernetes", "app", "react",
    "go", "java", "c++", "cpp", "data", "postgres", "sql", "macos", "windows",
    "openai", "deepmind", "gemini", "bard", "neural", "model", "gpt", "huggingface"
]

BAD_ENDINGS = [
    "–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å", "–ø—Ä–∏—Å—Ç—Ä—ñ–π", "–Ω–æ–≤–∏–Ω–∞", "—Ä–µ–ª—ñ–∑", "–≤–µ—Ä—Å—ñ—è", "—Ñ—ñ—á–∞", "–∞–ø–¥–µ–π—Ç",
    "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è", "–≤–∏–ø—É—Å–∫", "—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–º–æ–¥—É–ª—å", "–¥–æ–¥–∞—Ç–æ–∫", "‚Ä¶"
]

client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = TeleBot(TELEGRAM_BOT_TOKEN)

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    news = []
    try:
        resp = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=80", timeout=10)
        data = resp.json()
        for hit in data.get("hits", []):
            if hit.get("title") and hit.get("url"):
                title = hit["title"].lower()
                # –°—É–≤–æ—Ä–∏–π —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–æ–≤–∏—Ö IT —Å–ª–æ–≤–∞—Ö, —ñ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏
                if any(kw in title for kw in IT_KEYWORDS):
                    news.append({"title": hit["title"], "url": hit["url"]})
        random.shuffle(news)
    except Exception as e:
        print(f"[ERROR] fetch_fresh_news: {e}")
    return news

def extend_to_min_length(text, min_len=MIN_POST_LEN, max_len=MAX_POST_LEN):
    unique_memes = [x for x in MEME_LINES + EXTRA_IDEAS if x not in text]
    i = 0
    while len(text) < min_len and i < len(unique_memes):
        addition = " " + unique_memes[i]
        if len(text) + len(addition) > max_len:
            break
        text += addition
        i += 1
    if len(text) > max_len:
        last_space = text.rfind(' ', 0, max_len)
        if last_space == -1:
            last_space = max_len
        text = text[:last_space] + "‚Ä¶"
    return text.strip()

def clean_ending(text):
    last_word = text.strip().split()[-1].strip('.').strip('‚Ä¶').lower() if text.strip().split() else ''
    if last_word in BAD_ENDINGS or text.strip().endswith('‚Ä¶'):
        text = text.rstrip('‚Ä¶').rstrip('.') + ".\n\n" + random.choice(MEME_LINES)
    return text

def it_is_very_news(text):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤ –ø–æ—Å—Ç—ñ —î –Ü–¢-—Å–ª–æ–≤–∞, —ñ –Ω–µ–º–∞—î –ø–æ–±—É—Ç—É, –∂–∏—Ç—Ç—î–≤–∏—Ö —Ç–µ–º, –≤—ñ–¥—Å–∏–ª–æ–∫ –Ω–∞ –ú–∞—Å–∫–∞, Meta —Ç–æ—â–æ
    bad = ['—ñ–ª–æ–Ω', '–º–∞—Å–∫', '–º–∞—Ä—Å', '—Ç–µ—Å–ª–∞', 'meta', 'facebook', 'apple', 'google play', 'samsung', '–∫–æ—Ä–æ–ª–µ–≤–∞', '—Ç—Ä–∞–º–ø', '–ø–æ–ª—ñ—Ç–∏–∫–∞', '–≤—ñ—Ä—É—Å', 'covid', 'health', '–µ–Ω–µ—Ä–≥—ñ—è', '—Å–æ–Ω—Ü–µ', '–º–∞—Ä—Å—ñ–∞–Ω–∏–Ω', '–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç']
    lower = text.lower()
    if any(b in lower for b in bad):
        return False
    # –ú–∞—î –±—É—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑ IT_KEYWORDS
    return any(kw in lower for kw in IT_KEYWORDS)

def paraphrase_text(title, url):
    extra = ""
    if random.random() < 0.3:
        extra = "\n" + random.choice(EXTRA_IDEAS)
    prompt = (
        "–¢–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª—É –¥–ª—è –∞–π—Ç—ñ—à–Ω–∏–∫—ñ–≤. –ü–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é! "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤–µ–ª–∏–∫—É —ñ –º–∞–ª—É –ª—ñ—Ç–µ—Ä–∏, –Ω–µ –∫–æ–ø—ñ—é–π –∑–∞–≥–æ–ª–æ–≤–æ–∫! "
        "–í—ñ–∑—å–º–∏ —Ü—é –Ω–æ–≤–∏–Ω—É —ñ –Ω–∞–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ —Å—É—Ç—ñ, —â–æ —Å–∞–º–µ –≤–∏–π—à–ª–æ –Ω–æ–≤–æ–≥–æ, —è–∫–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—á–∞, —â–æ —Ü–µ –¥–∞—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º –∞–±–æ AI-–∫–æ–º‚Äô—é–Ω—ñ—Ç—ñ, –±–µ–∑ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó. "
        "–ù–µ –∑–≥–∞–¥—É–π —Å–∞–π—Ç–∏, –±—Ä–µ–Ω–¥–∏, Elon Musk, –ø–æ–ª—ñ—Ç–∏–∫—É, Meta, –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –ø—ñ–¥–ø–∏—Å–∫–∏ —ñ —Ä–µ–∫–ª–∞–º—É, –±–µ–∑ –≤–æ–¥–∏ —ñ –Ω–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –∂–∏—Ç—Ç—î–≤–∏–π –ø–æ—Å—Ç! "
        "–ü–∏—à–∏ —É 2 –∞–±–∑–∞—Ü–∞—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π emoji. –ú—ñ–Ω—ñ–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤. "
        f"\n–û—Å—å –Ω–æ–≤–∏–Ω–∞:\n{title}{extra}"
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=350,
            temperature=1.0
        )
        text = response.choices[0].message.content.strip()
        text = re.sub(r'http\S+', '', text)
        text = re.sub(r'#\w+', '', text)
        text = re.sub(r'(–∫–∞–Ω–∞–ª|—Å–∞–π—Ç|—Ä–µ—î—Å—Ç—Ä–∞—Ü|–ø—ñ–¥–ø–∏—Å|telegram|tg|—á–∏—Ç–∞–π—Ç–µ|–¥–µ—Ç–∞–ª—ñ|–¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ|—á–∏—Ç–∞–π|–¥–∏–≤–∏—Å—è|–¥–∏–≤–∏—Å—å|–∫–ª—ñ–∫|–ø—Ä–∏—î–¥–Ω—É–π|—Å–ª—ñ–¥–∫—É–π)', '', text, flags=re.I)
        text = re.sub(r'\n+', '\n', text)
        text = text.replace('  ', ' ')
        text = extend_to_min_length(text, min_len=MIN_POST_LEN, max_len=MAX_POST_LEN)
        if '\n' not in text:
            words = text.split()
            if len(words) > 32:
                text = ' '.join(words[:len(words)//2]) + '\n\n' + ' '.join(words[len(words)//2:])
        text = clean_ending(text)
        if all(e not in text for e in EMOJIS):
            text += " " + random.choice(EMOJIS)
        # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ IT —Ç–∞ AI —Ç–µ–º–∞—Ç–∏–∫—É!
        if not it_is_very_news(text):
            raise Exception("–ù–µ –∞–π—Ç—ñ –Ω–æ–≤–∏–Ω–∞, —Ñ—ñ–ª—å—Ç—Ä!")
        return text.strip()
    except Exception as e:
        print(f"[ERROR] paraphrase_text: {e}")
        return None  # –Ø–∫—â–æ –ø–æ–≥–∞–Ω–∏–π –ø–æ—Å—Ç ‚Äî –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏

def generate_caption(news):
    text = paraphrase_text(news["title"], news["url"])
    if not text:
        return None
    return f"{text}\n{SIGNATURE}"

def post_news():
    history = load_history()
    news_list = fetch_fresh_news()
    print(f"[DEBUG] –Ñ {len(news_list)} –Ω–æ–≤–∏–Ω")
    for news in news_list:
        print(f"[DEBUG] –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {news['title']}")
        if news["title"] not in history and news["title"]:
            caption = generate_caption(news)
            if not caption:
                continue  # –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∞, —è–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π—à–æ–≤!
            try:
                bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                print(f"[SUCCESS] –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                history.add(news["title"])
                save_history(history)
            except Exception as e:
                print(f"[ERROR] post_news: {e}")
            break
    else:
        print("[DEBUG] –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ–º–∞—î.")

if __name__ == "__main__":
    while True:
        now = datetime.now()
        if POSTING_HOURS_START <= now.hour < POSTING_HOURS_END:
            try:
                post_news()
            except Exception as e:
                print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            print("–ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –ø–æ—Å—Ç—ñ–≤!")
        time.sleep(600)
