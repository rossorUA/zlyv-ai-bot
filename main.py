from keep_alive import keep_alive
keep_alive()

import os
import time
import random
import json
import requests
import re
from datetime import datetime
import openai
from telebot import TeleBot

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 24

MIN_POST_LEN = 100
MAX_POST_LEN = 350

HISTORY_FILE = "post_history.json"
EMOJIS = [
    'üî•', 'ü§ñ', 'ü¶æ', 'üöÄ', 'üß†', '‚ú®', 'üí°', 'üòé', 'üéâ', 'üåü', 'üì±', 'üõ†', 'üëæ',
    'üìä', 'üíª', 'üì¢', '‚ö°Ô∏è', 'üë®‚Äçüíª', 'üòè', 'ü•∏', 'üîÆ', 'üïπÔ∏è', 'ü¶â', 'üé≤', 'üß©', 'üßë‚Äçüíª'
]
SIGNATURE = "\n@zlyv_ai"

IT_KEYWORDS = [
    "ai", "ml", "github", "python", "node", "javascript", "js", "typescript",
    "dev", "open source", "framework", "cloud", "linux", "tool", "api", "software",
    "release", "launch", "update", "feature", "docker", "kubernetes", "app", "react",
    "go", "java", "c++", "cpp", "data", "postgres", "sql", "macos", "windows",
    "openai", "deepmind", "gemini", "bard", "neural", "model", "gpt", "huggingface",
    "plugin", "sdk", "cli", "–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞", "—É—Ç–∏–ª—ñ—Ç–∞", "middleware", "package"
]

# –§—ñ–ª—å—Ç—Ä —Ç—ñ–ª—å–∫–∏ –ø–æ –ù–û–í–ò–• –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ê–•, –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ê–•, –ê–Ü/API/FW, —Ä–µ–ª—ñ–∑–∞—Ö
IT_STRICT_MUSTHAVE = [
    "–Ω–æ–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞", "api", "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è", "–¥–æ–¥–∞—Ç–æ–∫", "—É—Ç–∏–ª—ñ—Ç–∞", "open-source",
    "—Ä–µ–ª—ñ–∑", "release", "plugin", "sdk", "cli", "feature", "framework", "ai –º–æ–¥–µ–ª—å", "ai tool",
    "ml tool", "dev tool", "developer tool", "ai api", "library", "middleware", "package"
]

BAD_ENDINGS = [
    "–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å", "–ø—Ä–∏—Å—Ç—Ä—ñ–π", "–Ω–æ–≤–∏–Ω–∞", "—Ä–µ–ª—ñ–∑", "–≤–µ—Ä—Å—ñ—è", "—Ñ—ñ—á–∞", "–∞–ø–¥–µ–π—Ç",
    "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è", "–≤–∏–ø—É—Å–∫", "—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–º–æ–¥—É–ª—å", "–¥–æ–¥–∞—Ç–æ–∫", "‚Ä¶"
]

client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = TeleBot(TELEGRAM_BOT_TOKEN)

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    news = []
    try:
        resp = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=120", timeout=10)
        data = resp.json()
        for hit in data.get("hits", []):
            if hit.get("title") and hit.get("url"):
                title = hit["title"].lower()
                if any(kw in title for kw in IT_KEYWORDS):
                    news.append({"title": hit["title"], "url": hit["url"]})
        random.shuffle(news)
    except Exception as e:
        print(f"[ERROR] fetch_fresh_news: {e}")
    return news

def is_really_technical(text):
    # –ü–æ—Å—Ç —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç/–±—ñ–±–ª—ñ–æ—Ç–µ–∫—É/AI/API/–ø–ª–∞–≥—ñ–Ω ‚Äî¬†–±–µ–∑ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó, –ú–∞—Ä—Å–∞, Meta, IT-–ª–∞–π—Ñ—Å—Ç–∞–π–ª—É
    lower = text.lower()
    if not any(mh in lower for mh in IT_STRICT_MUSTHAVE):
        return False
    bad = ['—ñ–ª–æ–Ω', '–º–∞—Å–∫', 'meta', 'facebook', 'apple', '–∫–æ—Ä–æ–ª–µ–≤–∞', '—Ç—Ä–∞–º–ø', '–ø–æ–ª—ñ—Ç–∏–∫–∞', 'covid', '–µ–Ω–µ—Ä–≥—ñ—è', '–º–∞—Ä—Å', '—Ç–µ—Å–ª–∞', '–∂–∏—Ç—Ç—è', '–∑–¥–æ—Ä–æ–≤\'—è', 'lifestyle', 'planet', '–Ω–æ–≤–∏–Ω–∞ –¥–Ω—è']
    if any(b in lower for b in bad):
        return False
    # –Ø–∫—â–æ –Ω–µ–º–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Äî –Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏
    if not re.search(r"(–¥–ª—è |—è–∫–∞|–¥–æ–∑–≤–æ–ª—è—î|—â–æ–± |—è–∫ |—â–æ |api|—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç|–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞|—É—Ç–∏–ª—ñ—Ç–∞|framework|plugin|sdk)", lower):
        return False
    return True

def extend_to_min_length(text, min_len=MIN_POST_LEN, max_len=MAX_POST_LEN):
    if len(text) < min_len:
        text += " " + random.choice(EMOJIS)
    if len(text) > max_len:
        last_space = text.rfind(' ', 0, max_len)
        if last_space == -1:
            last_space = max_len
        text = text[:last_space] + "‚Ä¶"
    return text.strip()

def clean_ending(text):
    last_word = text.strip().split()[-1].strip('.').strip('‚Ä¶').lower() if text.strip().split() else ''
    if last_word in BAD_ENDINGS or text.strip().endswith('‚Ä¶'):
        text = text.rstrip('‚Ä¶').rstrip('.') + "."
    return text

def paraphrase_text(title, url):
    prompt = (
        "–¢–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª—É –¥–ª—è –∞–π—Ç—ñ—à–Ω–∏–∫—ñ–≤. –ü–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é! "
        "–ë–µ–∑ –∂–æ–¥–Ω–æ—ó –≤–æ–¥–∏, —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, API, AI-–ø—Ä–æ–¥—É–∫—Ç, —Ä–µ–ª—ñ–∑ —á–∏ –∞–ø–¥–µ–π—Ç. "
        "–û–ø–∏—à–∏ –¥–ª—è —á–æ–≥–æ —Ü–µ–π –ø—Ä–æ–¥—É–∫—Ç, –¥–ª—è –∫–æ–≥–æ, –≥–æ–ª–æ–≤–Ω—É —Ñ—ñ—á—É –∞–±–æ API, —è–∫ —é–∑–∞—Ç–∏ (1-2 —Ä–µ—á–µ–Ω–Ω—è), –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏. "
        "–ù–µ –∑–≥–∞–¥—É–π –±—Ä–µ–Ω–¥–∏, –ª—é–¥–µ–π, –ø–æ–ª—ñ—Ç–∏–∫—É, –Ω–µ –ø–∏—à–∏ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é, —Ç—ñ–ª—å–∫–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ —Å—É—Ç—å. "
        "–ü–∏—à–∏ —É 1-2 –∞–±–∑–∞—Ü–∞—Ö, –∑ emoji, –º—ñ–Ω—ñ–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤, –∑–∞–∫—ñ–Ω—á—É–π —Ä–µ—á–µ–Ω–Ω—è–º, –Ω–µ –æ–±—Ä–∏–≤–∞–π –ø–æ—Å—Ç!"
        "\n–û—Å—å –Ω–æ–≤–∏–Ω–∞:\n" + title
    )
    for _ in range(4):  # –¥–æ 4 —Å–ø—Ä–æ–±
        try:
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=350,
                temperature=0.8
            )
            text = response.choices[0].message.content.strip()
            text = re.sub(r'http\S+', '', text)
            text = re.sub(r'#\w+', '', text)
            text = re.sub(r'\n+', '\n', text)
            text = text.replace('  ', ' ')
            text = extend_to_min_length(text, min_len=MIN_POST_LEN, max_len=MAX_POST_LEN)
            if all(e not in text for e in EMOJIS):
                text += " " + random.choice(EMOJIS)
            text = clean_ending(text)
            if not is_really_technical(text):
                continue  # —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, –∂–æ–¥–Ω–æ—ó –≤–æ–¥–∏
            if not text.endswith('.') and not text.endswith('!') and not text.endswith('?'):
                text += "."
            if len(text) < MIN_POST_LEN:
                continue
            return text.strip()
        except Exception as e:
            print(f"[ERROR] paraphrase_text: {e}")
            continue
    return None

def generate_caption(news):
    text = paraphrase_text(news["title"], news["url"])
    if not text:
        return None
    return f"{text}\n{SIGNATURE}"

def post_news():
    history = load_history()
    news_list = fetch_fresh_news()
    print(f"[DEBUG] –Ñ {len(news_list)} –Ω–æ–≤–∏–Ω")
    for news in news_list:
        print(f"[DEBUG] –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {news['title']}")
        if news["title"] not in history and news["title"]:
            caption = generate_caption(news)
            if not caption:
                continue  # –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∞, —è–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π—à–æ–≤!
            try:
                bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                print(f"[SUCCESS] –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                history.add(news["title"])
                save_history(history)
            except Exception as e:
                print(f"[ERROR] post_news: {e}")
            break
    else:
        print("[DEBUG] –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ–º–∞—î.")

if __name__ == "__main__":
    while True:
        now = datetime.now()
        if POSTING_HOURS_START <= now.hour < POSTING_HOURS_END:
            try:
                post_news()
            except Exception as e:
                print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            print("–ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –ø–æ—Å—Ç—ñ–≤!")
        time.sleep(600)
