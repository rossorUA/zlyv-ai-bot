from keep_alive import keep_alive
keep_alive()
import os
import time
import random
import json
import requests
from datetime import datetime
import openai
from telebot import TeleBot

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 21
MIN_POST_LEN = 250
MAX_POST_LEN = 300

HISTORY_FILE = "post_history.json"
EMOJIS = ['üî•', 'ü§ñ', 'ü¶æ', 'üöÄ', 'üß†', '‚ú®', 'üí°', 'üòé', 'üéâ', 'üåü', 'üì±', 'üõ†', 'üëæ', 'üìä', 'üíª', 'üì¢', '‚ö°Ô∏è', 'üë®‚Äçüíª', 'üòè', 'ü•∏', 'üîÆ', 'üïπÔ∏è']
SIGNATURE = "\n@zlyv_ai"

STATIC_THEMES = [
    "AI-–Ω–æ–≤–∏–Ω–∫–∏", "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏", "—ñ–Ω—Å–∞–π–¥–∏", "–Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", "Google", "GitHub", "–ª–∞–π—Ñ—Ö–∞–∫–∏",
    "open-source", "ProductHunt", "Bun", "Deno", "Next.js", "Qwik", "Astro", "VS Code",
    "Copilot", "–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", "—Ç—Ä–µ–Ω–¥–∏", "DevTools", "Linux", "API", "Cloud", "ML"
]

MEME_LINES = [
    "–ü–∏—à–∏ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö, —è–∫—â–æ –≤–∂–µ —é–∑–∞—î—à —Ü–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω üòÖ",
    "–ó —Ç–∞–∫–æ—é –Ω–æ–≤–∏–Ω–æ—é –Ω–∞–≤—ñ—Ç—å –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–µ —Å—Ç—Ä–∞—à–Ω–∏–π üí™",
    "–ó–∞–ª–∏–ø–∞–π –∑–∞ –∫–æ–º–ø–æ–º ‚Äì —ñ –Ω–µ –∑–∞–±—É–¥—å –∑—Ä–æ–±–∏—Ç–∏ –∫–∞–≤—É ‚òïÔ∏è",
    "–í—ñ–¥–∫–ª–∞–¥–∏ –º–∏—à–∫—É, —á–∞—Å –∞–ø–≥—Ä–µ–π–¥–Ω—É—Ç–∏ –º–æ–∑–æ–∫ üß†",
    "–í –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Å–≤—ñ–∂–µ, –±–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –≤–æ–¥–∏ ü•§",
    "–Ø–∫—â–æ –¥–æ—á–∏—Ç–∞–≤ ‚Äì —Ç–∏ —Ä–µ–∞–ª—å–Ω–æ —à–∞—Ä–∏—à üòâ",
    "–ó —Ç–∞–∫–∏–º –∞–ø–¥–µ–π—Ç–æ–º –Ω–∞–≤—ñ—Ç—å –∫–æ–¥ —Ä–µ–≤‚Äô—é –∑–¥–∞—î—Ç—å—Å—è –ª–µ–≥–∫–∏–º üëÄ",
    "–§—É—Ö, –Ω—É —Ü–µ –≤–∂–µ next level! üöÄ"
]

client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = TeleBot(TELEGRAM_BOT_TOKEN)

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    news = []
    try:
        resp = requests.get("https://hn.algolia.com/api/v1/search_by_date?tags=story&hitsPerPage=50", timeout=10)
        print(f"[DEBUG] –°—Ç–∞—Ç—É—Å –∫–æ–¥: {resp.status_code}")
        data = resp.json()
        for hit in data.get("hits", []):
            if hit.get("title") and hit.get("url"):
                news.append({"title": hit["title"], "url": hit["url"]})
        random.shuffle(news)
        print(f"[DEBUG] –ù–æ–≤–∏–Ω –∑—ñ–±—Ä–∞–Ω–æ: {len(news)}")
    except Exception as e:
        print(f"[ERROR] fetch_fresh_news: {e}")
    return news

def paraphrase_text(title, url):
    prompt = (
        "–¢–∏ ‚Äì —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª—É –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤. –°—Ç–∏—Å–Ω–∏ –Ω–æ–≤–∏–Ω—É –¥–æ 250‚Äì300 —Å–∏–º–≤–æ–ª—ñ–≤, –ø–∏—à–∏ –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–æ —ñ —É–Ω—ñ–∫–∞–ª—å–Ω–æ! "
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π, —Ñ–∞–∫—Ç–∏ –Ω–µ –≤–∏–≥–∞–¥—É–π, –∞–ª–µ –∑—Ä–æ–±–∏ —Ç–µ–∫—Å—Ç —Ü—ñ–∫–∞–≤–∏–º, –∞–≤—Ç–æ—Ä—Å—å–∫–∏–º —ñ –ª–µ–≥–∫–∏–º. "
        "–î–æ–¥–∞–≤–∞–π —ñ–Ω—Ç—Ä–∏–≥—É, –ø—Ä–∏–∫–æ–ª –∞–±–æ —Ñ—ñ—à–∫—É. –ù—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á—É–π –ø–∏—Ç–∞–Ω–Ω—è–º. –î–æ–¥–∞–≤–∞–π —ñ–Ω–æ–¥—ñ –µ–º–æ–¥–∑—ñ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∞–±–æ –∫—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç—É. "
        f"–û—Å—å –Ω–æ–≤–∏–Ω–∞:\n{title}\n{url}"
    )
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=180,
            temperature=1.3
        )
        text = response.choices[0].message.content.strip()
        # –û–±—Ä—ñ–∑–∞—Ç–∏, —è–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ
        if len(text) > MAX_POST_LEN:
            text = text[:MAX_POST_LEN-1] + '‚Ä¶'
        return text
    except Exception as e:
        print(f"[ERROR] paraphrase_text: {e}")
        return title  # fallback, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫

def should_send_image():
    # –ö–æ–∂–µ–Ω 4-7 –ø–æ—Å—Ç - –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é
    return random.randint(1, 6) == 3

def generate_caption(news, emojis):
    theme = random.choice(STATIC_THEMES)
    emoji = random.choice(emojis)
    intro = f"{emoji} {theme.upper()}"
    text = paraphrase_text(news["title"], news["url"])
    # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —ñ —Å—Ç–∏–ª—å
    if len(text) < MIN_POST_LEN:
        text += " " + random.choice(MEME_LINES)
    # –î–æ–¥–∞—î–º–æ –º–µ–º–Ω–∏–π –∞–±–∑–∞—Ü —á–µ—Ä–µ–∑ —Ä–∞–∑
    if random.random() < 0.4:
        text += "\n\n" + random.choice(MEME_LINES)
    # –î–æ–¥–∞—î–º–æ —â–µ –µ–º–æ–¥–∑—ñ —É –∫—ñ–Ω–µ—Ü—å –∞–±–æ —Å–µ—Ä–µ–¥–∏–Ω—É
    if random.random() < 0.5:
        text += " " + random.choice(EMOJIS)
    return f"{intro}\n\n{text}\n{SIGNATURE}"

def generate_ai_image(news):
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –º–∞–ª—é–Ω–æ–∫ —á–µ—Ä–µ–∑ OpenAI DALL-E (–∞–±–æ —Ä–æ–±–∏–º–æ –º–µ–º/–±–∞–Ω–µ—Ä –Ω–∞ —Ç–µ–º—É –Ω–æ–≤–∏–Ω–∏)
    try:
        prompt = f"{news['title']}, trending, digital art, bright colors, vector illustration"
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response.data[0].url
        return image_url
    except Exception as e:
        print(f"[ERROR] generate_ai_image: {e}")
        return None

def post_news():
    history = load_history()
    news_list = fetch_fresh_news()
    print(f"[DEBUG] –Ñ {len(news_list)} –Ω–æ–≤–∏–Ω")
    for news in news_list:
        print(f"[DEBUG] –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {news['title']}")
        if news["title"] not in history and news["title"]:
            caption = generate_caption(news, EMOJIS)
            try:
                # –í–∏–ø–∞–¥–∫–æ–≤–æ –¥–æ–¥–∞—î–º–æ –º–∞–ª—é–Ω–æ–∫ (—Ä–∞–∑ –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ—Å—Ç—ñ–≤)
                if should_send_image():
                    img_url = generate_ai_image(news)
                    if img_url:
                        bot.send_photo(TELEGRAM_CHANNEL_ID, img_url, caption=caption)
                        print(f"[SUCCESS] –ü–æ—Å—Ç —ñ–∑ –º–∞–ª—é–Ω–∫–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                    else:
                        bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                        print(f"[SUCCESS] –ü–æ—Å—Ç –±–µ–∑ –º–∞–ª—é–Ω–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                else:
                    bot.send_message(TELEGRAM_CHANNEL_ID, caption)
                    print(f"[SUCCESS] –ü–æ—Å—Ç –±–µ–∑ –º–∞–ª—é–Ω–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {caption[:60]}")
                history.add(news["title"])
                save_history(history)
            except Exception as e:
                print(f"[ERROR] post_news: {e}")
            break
    else:
        print("[DEBUG] –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ–º–∞—î.")

if __name__ == "__main__":
    while True:
        now = datetime.now()
        if POSTING_HOURS_START <= now.hour < POSTING_HOURS_END:
            try:
                post_news()
            except Exception as e:
                print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            print("–ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –ø–æ—Å—Ç—ñ–≤!")
        time.sleep(600)
