from keep_alive import keep_alive
keep_alive()

import os
import time
import random
import json
import datetime
import requests
import openai
from telebot import TeleBot

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
bot = TeleBot(TELEGRAM_BOT_TOKEN)
client = openai.OpenAI()

HISTORY_FILE = "post_history.json"
MAX_POSTS_PER_DAY = 30
POSTING_HOURS_START = 9
POSTING_HOURS_END = 21

MIN_SYMBOLS = 200  # –º—ñ–Ω—ñ–º—É–º 200 –±—É–∫–≤ —É –Ω–æ–≤–∏–Ω—ñ
SIGNATURE = "@zlyv_ai"

EMOJIS = [
    "üî•", "üöÄ", "üí°", "ü§ñ", "üß†", "üåü", "‚ö°Ô∏è", "‚ú®", "üéØ", "ü¶æ", "üí•", "üß©", "üì£", "üìù", "üòé",
    "ü•≥", "üëæ", "üïπÔ∏è", "üíª", "üßë‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüíª", "üéâ"
]
PIKA_JOKES = [
    "–†–µ–∞–ª—å–Ω–æ –∫–∞–π—Ñ—É—é –∑ —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏! üòé",
    "–ù—É —Ç—É—Ç –Ω–∞–≤—ñ—Ç—å –®–Ü –æ—Ñ—ñ–≥—ñ–≤ –±–∏ ü§ñ",
    "–¢–∞–∫–∞ –Ω–æ–≤–∏–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å —Ä–æ–±–æ—Ç –∑–∞–¥—É–º–∞–≤—Å—è... ü¶æ",
    "–Ü–Ω—Ñ–∞, —è–∫–∞ –∑–∞—Å–ª—É–≥–æ–≤—É—î –Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏! ‚≠êÔ∏è",
    "–ú—ñ–π –Ω–µ–π—Ä–æ–Ω—á–∏–∫ –≤—ñ–¥ —Ç–∞–∫–æ—ó –Ω–æ–≤–∏–Ω–∏ –∞–∂ –∑–∞–≥–æ—Ä—ñ–≤—Å—è üî•"
]
# –°—é–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —â–µ —Å–≤–æ—ó –ø—Ä–∏–∫–æ–ª–∏!

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(list(history), f, ensure_ascii=False)

def fetch_fresh_news():
    try:
        resp = requests.get("https://ain.ua/feed/")
        if resp.status_code != 200:
            return None
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(resp.content, features="xml")
        items = soup.findAll("item")
        random.shuffle(items)
        for item in items:
            title = item.title.text
            description = item.description.text if item.description else ""
            link = item.link.text
            source_text = f"{title}. {description}\n\n{link}"

            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç/—Å–º–∞–π–ª–∏–∫/–≤–æ–≥–Ω–∏–∫ –≤ prompt –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤—É
            emoji = random.choice(EMOJIS)
            joke = random.choice(PIKA_JOKES) if random.random() < 0.2 else ""

            prompt = (
                f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ü—é –Ω–æ–≤–∏–Ω—É –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É —ñ–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, "
                f"–∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Å—É—Ç—å, –¥–æ–¥–∞–π –±–∞–≥–∞—Ç–æ —Å—É—á–∞—Å–Ω–∏—Ö –µ–º–æ–¥–∑—ñ, —Å–ø—Ä–∞–≤–∂–Ω—ñ –∞–±–∑–∞—Ü–∏, "
                f"–ª–µ–≥–∫—É –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤—ñ—Å—Ç—å. –ú—ñ–Ω—ñ–º—É–º 200 –±—É–∫–≤ (–±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤). "
                f"–ù–µ –¥–æ–¥–∞–≤–∞–π –∑–∞–∫–ª–∏–∫—ñ–≤ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ –≤—ñ–¥–≥—É–∫—ñ–≤. "
                f"–ü—ñ–¥–ø–∏—Å –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ ‚Äî {SIGNATURE} –≤ —Å–∞–º–æ–º—É –∫—ñ–Ω—Ü—ñ. "
                f"{joke}\n–¢–µ–∫—Å—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è Telegram, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞. –û—Å—å –Ω–æ–≤–∏–Ω–∞:\n\n{source_text}"
            )
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=1.1,
                max_tokens=340,
            )
            news = response.choices[0].message.content.strip()
            news = news.rstrip(".")
            if not news.endswith(SIGNATURE):
                news = news + "\n\n" + SIGNATURE
            # –î–æ–¥–∞—î–º–æ —Å–º–∞–π–ª–∏–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø–æ—Å—Ç–∞, —è–∫—â–æ GPT –Ω–µ –¥–æ–¥–∞–≤
            if not any(e in news[:10] for e in EMOJIS):
                news = emoji + " " + news
            # –†–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏ (–±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤)
            news_symbols = len("".join([c for c in news if c.isalpha()]))
            if news_symbols >= MIN_SYMBOLS:
                return news
        return None
    except Exception as e:
        print(f"‚ùå OpenAI/News fetch error: {e}")
        return None

def generate_dalle_image(news_text):
    # –°—Ç–∏–ª—å —Ä–∞–Ω–¥–æ–º–Ω–æ: –º–µ–º, –≤–µ–∫—Ç–æ—Ä, –∞–π—Ç—ñ, –∫—Ä–µ–∞—Ç–∏–≤
    styles = [
        "vector illustration", "digital art", "cyberpunk style", "funny meme", "pixel art",
        "3d render", "futuristic", "techno art", "cartoon", "realistic", "anime style"
    ]
    style = random.choice(styles)
    dalle_prompt = (
        f"Create a {style} for the topic: {news_text[:80]}."
        f" Make it modern, creative, colorful, and IT/AI themed."
    )
    try:
        response = client.images.generate(
            model="dall-e-3",
            prompt=dalle_prompt,
            n=1,
            size="1024x1024"
        )
        return response.data[0].url
    except Exception as e:
        print(f"‚ùå DALL-E error: {e}")
        return None

def post_to_telegram(text, image_url=None):
    if image_url:
        bot.send_photo(TELEGRAM_CHANNEL_ID, image_url, caption=text)
        print(f"üñºÔ∏è [{datetime.datetime.now().strftime('%H:%M:%S')}] –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –ø–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ!")
    else:
        bot.send_message(TELEGRAM_CHANNEL_ID, text)
        print(f"‚úÖ [{datetime.datetime.now().strftime('%H:%M:%S')}] –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")

def random_delay():
    return random.randint(600, 3600)

def main():
    history = load_history()
    post_count = 0
    today = datetime.date.today()

    while True:
        now = datetime.datetime.now()
        if now.date() != today:
            post_count = 0
            today = now.date()

        if not (POSTING_HOURS_START <= now.hour < POSTING_HOURS_END):
            print("üåô –ù–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥—É. –ß–µ–∫–∞—é –¥–æ —Ä–∞–Ω–∫—É...")
            time.sleep(300)
            continue

        if post_count >= MAX_POSTS_PER_DAY:
            print("üìÖ –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –ß–µ–∫–∞—é –¥–æ –∑–∞–≤—Ç—Ä–∞...")
            time.sleep(3600)
            continue

        post = fetch_fresh_news()
        if not post or post in history:
            print("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–≤–∏–π –ø–æ—Å—Ç, —Å–∫–∏–ø–∞—é —Ü—é —Å–ø—Ä–æ–±—É.")
            time.sleep(300)
            continue

        # –ö–æ–∂–Ω–µ 8-–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ DALL-E
        image_url = None
        if (post_count + 1) % 8 == 0:
            image_url = generate_dalle_image(post)
            if not image_url:
                print("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–∞–¥—Å–∏–ª–∞—é —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç.")
        post_to_telegram(post, image_url)
        history.add(post)
        save_history(history)
        post_count += 1

        delay = random_delay()
        print(f"‚è≥ –ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay // 60} —Ö–≤–∏–ª–∏–Ω.")
        time.sleep(delay)

if __name__ == "__main__":
    main()
